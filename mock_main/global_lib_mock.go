// Code generated by MockGen. DO NOT EDIT.
// Source: global_lib.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIGlobalLib is a mock of IGlobalLib interface.
type MockIGlobalLib struct {
	ctrl     *gomock.Controller
	recorder *MockIGlobalLibMockRecorder
}

// MockIGlobalLibMockRecorder is the mock recorder for MockIGlobalLib.
type MockIGlobalLibMockRecorder struct {
	mock *MockIGlobalLib
}

// NewMockIGlobalLib creates a new mock instance.
func NewMockIGlobalLib(ctrl *gomock.Controller) *MockIGlobalLib {
	mock := &MockIGlobalLib{ctrl: ctrl}
	mock.recorder = &MockIGlobalLibMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGlobalLib) EXPECT() *MockIGlobalLibMockRecorder {
	return m.recorder
}

// EmptyByte32 mocks base method.
func (m *MockIGlobalLib) EmptyByte32() [32]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyByte32")
	ret0, _ := ret[0].([32]byte)
	return ret0
}

// EmptyByte32 indicates an expected call of EmptyByte32.
func (mr *MockIGlobalLibMockRecorder) EmptyByte32() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyByte32", reflect.TypeOf((*MockIGlobalLib)(nil).EmptyByte32))
}

// NowUnixNano mocks base method.
func (m *MockIGlobalLib) NowUnixNano() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NowUnixNano")
	ret0, _ := ret[0].(int64)
	return ret0
}

// NowUnixNano indicates an expected call of NowUnixNano.
func (mr *MockIGlobalLibMockRecorder) NowUnixNano() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NowUnixNano", reflect.TypeOf((*MockIGlobalLib)(nil).NowUnixNano))
}
